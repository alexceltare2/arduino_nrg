#define RFCHANNEL        0       // Let's use channel 0
#define SYNCWORD1        0xB5    // Synchronization word, high byte
#define SYNCWORD0        0x47    // Synchronization word, low byte
#define SOURCE_ADDR      7       // Sender address
#define PACKET_SIZE      2       // Size of packet in bytes (ADDR + DATA1 +...)

CCPACKET txPacket;  // packet object
uint8_t data_one = 0;

/**
 * This function is called whenever a wireless packet is received
 */
void rfPacketReceived(CCPACKET *packet)
{   
  // The LED will toggle when a new packet is received
  if (packet->length > 1)
  {   
    data_one = packet->data[1];   // Our source address
    // packet.data[1];   // Self-incrementing value generated by the sender
  }
}

void setup()
{
  // Setup LED output pin
  pinMode(LED, OUTPUT);
  digitalWrite(LED, LOW);

  //panstamp.init(CFREQ_868); //obsolete, change panstamp.h
  panstamp.radio.setChannel(RFCHANNEL);
  panstamp.radio.setSyncWord(SYNCWORD1, SYNCWORD0);
  panstamp.radio.setDevAddress(SOURCE_ADDR);
  panstamp.radio.setCCregs();
  panstamp.setLowTxPower();

  // Let's disable address check for the current project so that our device
  // will receive packets even not addressed to it.
  //panstamp.radio.disableAddressCheck();

  // Declare RF callback function
  panstamp.setPacketRxCallback(rfPacketReceived);
  panstamp.radio.sendData(txPacket); //Necessarily dummy send packet
  panstamp.radio.enableAddressCheck();
}

void loop()
{
  panstamp.radio.setWorState(12);
  
  if (data_one == 22){
  digitalWrite(LED_GREEN, HIGH);
  delay(200);
  digitalWrite(LED_GREEN, LOW);
  data_one = 0;
  }
  
}
